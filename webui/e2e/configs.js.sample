/**
 *
 * @source: http://bitbucket.org/openattic/openattic
 *
 * @licstart  The following is the entire license notice for the
 *  JavaScript code in this page.
 *
 * Copyright (C) 2011-2016, it-novum GmbH <community@openattic.org>
 *
 *
 * The JavaScript code in this page is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License as published by the Free Software
 * Foundation; version 2.
 *
 * This package is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * As additional permission under GNU GPL version 2 section 3, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 1, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */
'use strict';
(function(){
  module.exports = {
    urls: {
      base: '<proto://addr:port>',
      ui  : '/openattic/#/', // Use '/#/' for Vagrant boxes.
      api : '/openattic/api/' // Use '/api/' for Vagrant boxes.
    },

    username: '<log_in_name>', // Name of the user protractor uses.
    password: '<user_password>', // Password for the $log_in_name user.
    sleep   : 2000, // Default browser test sleep time.
    outDir: '<existing_path>', // Path in which the test report will be stored. If preserveDirectory is false, this folder will be cleaned on each test.
    preserveDirectory: <boolean>, // Indicates if each report should be created in a separate directory with unique name.
    captureOnlyFailedSpecs: <boolean>, // When this option is enabled, reporter will create screenshots only for specs that have failed their expectations.
    allScriptsTimeout: <ms>, // Timeout value for each test in miliseconds.

    cephCluster: { // Contains all ceph cluster definitions
      cluster1: { // Defines a cluster
        name: '<cluster_name>', // The name of the ceph cluster.
        pools: { // Contains all pool definitions for this cluster
          cephPool1: { // Defines a pool
            name        : '<ceph_pool_name>',
            size        : '<size>',
            unit        : 'GB',
            writable    : '<isWritable>' // If $isWritable is false nothing will be created on the pool.
          },
          cephPool2: { // Defines a pool
            name        : '<ceph_pool_name>',
            size        : '<size>',
            unit        : 'GB',
            writable    : '<isWritable>' // If $isWritable is false nothing will be created on the pool.
          }
        }
      }
    }
  };
}());
